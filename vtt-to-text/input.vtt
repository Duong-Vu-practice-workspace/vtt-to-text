1
00:00:01,540 --> 00:00:08,350
Now let's talk about another software architecture pattern that can help us scale a complex flow of

2
00:00:08,350 --> 00:00:09,790
business transactions.

3
00:00:09,820 --> 00:00:16,000
This pattern is called choreography and is a kind of a sibling of the orchestrator pattern.

4
00:00:16,030 --> 00:00:22,630
The problem statement here is the same as the one we covered in the lecture on the orchestration pattern.

5
00:00:22,930 --> 00:00:30,040
And that is we have a collection of microservices where each microservice is responsible for a particular

6
00:00:30,040 --> 00:00:33,370
type of operations or a specific domain.

7
00:00:33,430 --> 00:00:40,030
The microservices are completely decoupled from each other and are potentially not even aware of each

8
00:00:40,030 --> 00:00:45,910
other based on an external trigger, such as an event or a request from a user.

9
00:00:45,940 --> 00:00:51,430
We need to complete a flow of transactions that span multiple microservices.

10
00:00:51,700 --> 00:00:58,720
One solution we offered was the execution orchestrator pattern, where we have a central service that

11
00:00:58,720 --> 00:01:05,260
executes a flow by communicating with the relevant services until the flow is complete.

12
00:01:05,349 --> 00:01:11,630
While the orchestration pattern is arguably the most intuitive and easiest to implement.

13
00:01:11,650 --> 00:01:13,380
It has a few drawbacks.

14
00:01:13,390 --> 00:01:19,180
One of the drawbacks is the tight coupling to all the microservices in the system.

15
00:01:19,210 --> 00:01:26,920
Remember that one of the reasons we wanted to move to microservices architecture was to speed up development

16
00:01:26,920 --> 00:01:30,100
by decoupling the microservices from each other.

17
00:01:30,800 --> 00:01:37,070
Now imagine that the team of Service A is working on some modifications to its service.

18
00:01:37,490 --> 00:01:45,260
At the same time, the theme of Service B is also making changes to their service and the new team is

19
00:01:45,260 --> 00:01:52,340
building a new service called Service C Now because the orchestrator service is tightly coupled with

20
00:01:52,340 --> 00:01:59,390
all those services, all the three teams need to coordinate with each other to make sure that changes

21
00:01:59,390 --> 00:02:01,790
they are making to the orchestration service.

22
00:02:01,790 --> 00:02:03,560
Don't break any flow.

23
00:02:04,100 --> 00:02:11,090
And with three teams working on the same code base at the same time, it starts feeling a lot like the

24
00:02:11,090 --> 00:02:14,030
monolithic application we moved away from.

25
00:02:14,210 --> 00:02:22,070
This situation is a big issue that many companies suffer from at one point or another and is often referred

26
00:02:22,070 --> 00:02:25,370
to as a distributed monolith anti pattern.

27
00:02:25,610 --> 00:02:32,360
In this anti pattern, we get all the problems of the monolithic architecture and all the issues of

28
00:02:32,360 --> 00:02:36,500
the microservices architecture, but without any benefits.

29
00:02:36,500 --> 00:02:43,220
So when we have frequent changes happening in multiple microservices, there's a better software architecture

30
00:02:43,220 --> 00:02:45,860
pattern called choreography.

31
00:02:45,860 --> 00:02:53,810
And the choreography pattern, we remove the smart orchestrator service and replace it with a dumb distributed

32
00:02:53,810 --> 00:02:59,840
message cue or message broker that stores all the incoming events at the same time.

33
00:02:59,870 --> 00:03:06,380
All the microservices in our system subscribe to relevant events from the message broker where they

34
00:03:06,380 --> 00:03:07,550
need to get involved.

35
00:03:07,550 --> 00:03:14,960
Once the microservices processes and incoming event, it emits a result as another event to a different

36
00:03:14,960 --> 00:03:22,760
channel or topic, which in turn triggers another servers to take an action and produce another event.

37
00:03:22,790 --> 00:03:29,150
This chain of events keeps going all the way until the completion of the flow of transactions.

38
00:03:29,240 --> 00:03:34,220
The analogy this pattern is using is a sequence of steps in a dance.

39
00:03:34,520 --> 00:03:41,690
So just like a group of dancers, the microservices are performing their steps when it's their turn

40
00:03:41,720 --> 00:03:45,470
to complete the entire flow of operations as a group.

41
00:03:45,650 --> 00:03:52,820
The advantages of this pattern in microservices architecture are pretty evident in terms of loose coupling

42
00:03:52,820 --> 00:03:54,200
between services.

43
00:03:54,200 --> 00:04:01,340
Since the communication happens through a synchronous events, we can easily make changes and add or

44
00:04:01,340 --> 00:04:05,340
remove services completely independently from each other.

45
00:04:05,360 --> 00:04:14,060
This allows us to scale any flow to as many services as we want, and also we can scale our organization

46
00:04:14,060 --> 00:04:22,400
much easier since we can have many teams operating autonomously with very little friction in the cloud

47
00:04:22,400 --> 00:04:23,450
environment.

48
00:04:23,450 --> 00:04:31,070
All or some of those microservices can be implemented as function as a service, which means they don't

49
00:04:31,070 --> 00:04:34,130
consume any resources until an event.

50
00:04:34,130 --> 00:04:40,670
They're interested in triggers their execution, and if they don't consume any resources, we don't

51
00:04:40,670 --> 00:04:45,210
have to pay for them, which makes our system very cost effective.

52
00:04:45,230 --> 00:04:52,790
On the other hand, if one service needs to handle frequent events, it can scale automatically using

53
00:04:52,790 --> 00:04:56,930
out of scaling policies, just like we learned in the previous lectures.

54
00:04:56,960 --> 00:05:00,080
Now let's talk about the downside of this pattern.

55
00:05:00,080 --> 00:05:07,310
Since we don't have a centralized orchestrator, it is a lot harder to troubleshoot if things go wrong

56
00:05:07,340 --> 00:05:09,650
as part of the execution of a flow.

57
00:05:10,310 --> 00:05:16,760
It's also very hard to trace the flow of events since all of those events are asynchronous.

58
00:05:16,760 --> 00:05:21,980
So those are just a few things to keep in mind when considering using this pattern.

59
00:05:22,310 --> 00:05:28,580
Now that we have a good understanding of the choreography pattern on a high level, let's walk through

60
00:05:28,580 --> 00:05:33,440
a real life example where the choreography architecture pattern can be used.

61
00:05:33,830 --> 00:05:37,430
The example we're going to use is a job search service.

62
00:05:37,550 --> 00:05:45,500
In the service, a candidate looking for a job can simply go to our website, fill out a form, sharing

63
00:05:45,500 --> 00:05:50,810
some information about themselves, and also upload their resume to our system.

64
00:05:50,810 --> 00:05:59,510
Once they do that, their information is ingested into our system and starts automatically and continuously

65
00:05:59,540 --> 00:06:03,200
looking for job openings where they can be a good match.

66
00:06:03,410 --> 00:06:09,920
Now, based on the candidate's preference, they can get notified about those job opportunities as they

67
00:06:09,920 --> 00:06:14,420
arrive or as a daily or weekly feed to their email.

68
00:06:14,600 --> 00:06:21,860
If one of those job opportunities looks good, the candidate simply opens the email and clicks the apply

69
00:06:21,860 --> 00:06:22,450
button.

70
00:06:22,460 --> 00:06:29,780
So let's see how we can design the main scenario of signing up for our service using the choreography.

71
00:06:30,540 --> 00:06:37,890
After the user completes the form and uploads their resume using our front end, all that data is sent

72
00:06:37,890 --> 00:06:39,450
to the candidate service.

73
00:06:40,080 --> 00:06:46,830
The candidate service takes all the information about the new candidate and stores it in a database.

74
00:06:47,190 --> 00:06:54,480
After that, it emits a new event that triggers an email confirmation cloud function, which sends an

75
00:06:54,480 --> 00:06:56,730
email confirmation to the candidate.

76
00:06:57,000 --> 00:07:04,920
This email confirmation informs them that the registration and resume were received and we are now actively

77
00:07:04,920 --> 00:07:06,510
looking for a job for them.

78
00:07:06,780 --> 00:07:14,400
The same event that trigger the email confirmation function is also consumed by the skills parser service.

79
00:07:14,640 --> 00:07:22,110
This service passes all the information from the resume as well as the data provided by the candidate

80
00:07:22,110 --> 00:07:29,430
and builds a model of what skills the candidate has, as well as their level of experience with those

81
00:07:29,430 --> 00:07:30,120
skills.

82
00:07:30,660 --> 00:07:37,920
Once that information is extracted, they're stored in a database and then the skills parser service

83
00:07:37,920 --> 00:07:45,180
emits a new event that triggers the job search service to search the database of open jobs for that

84
00:07:45,180 --> 00:07:45,810
user.

85
00:07:46,470 --> 00:07:53,130
When the search is done, the results are emitted as another event which is consumed by the candidate

86
00:07:53,130 --> 00:07:55,290
service and the email service.

87
00:07:55,680 --> 00:08:02,010
The candidate service adds those jobs to the candidate's record so the candidate can see them when they

88
00:08:02,010 --> 00:08:02,820
log in.

89
00:08:03,120 --> 00:08:09,400
And the email service can either send the new jobs to the candidate or do nothing.

90
00:08:09,420 --> 00:08:15,300
If the candidate indicated that they want to get only a daily or weekly digest.

91
00:08:15,330 --> 00:08:23,280
So as we can see, the entire flow of execution happens through asynchronous communication among services

92
00:08:23,280 --> 00:08:27,240
without any central entity to orchestrate the flow.

93
00:08:27,420 --> 00:08:33,900
By using this pattern, we reduce the cost and overhead of having the orchestrator service.

94
00:08:34,020 --> 00:08:40,470
And additionally, since all the events are delivered through a message broker, even if one of the

95
00:08:40,470 --> 00:08:45,960
services was done temporarily, it did not result in loss of messages.

96
00:08:45,960 --> 00:08:52,680
When that service comes back online, it can consume those events from the message broker as if nothing

97
00:08:52,680 --> 00:08:53,340
happened.

98
00:08:53,370 --> 00:09:00,120
Now another benefit is if we want to modify the sign up flow, we can do it very easily.

99
00:09:00,420 --> 00:09:07,440
For example, if we want to add a new service that notifies companies about the new candidates with

100
00:09:07,440 --> 00:09:14,430
certain valuable skills, we can easily just add that service and let it subscribe to relevant events

101
00:09:14,430 --> 00:09:15,870
from the message broker.

102
00:09:16,050 --> 00:09:22,950
With this addition, we don't have to touch any other service which keeps our system loosely coupled.

103
00:09:23,370 --> 00:09:31,350
This way we can scale our organization and allow running complex and ever evolving flows very easily.

104
00:09:31,380 --> 00:09:38,280
On the flip side, as we already mentioned, if something goes wrong, it will be very hard for us to

105
00:09:38,280 --> 00:09:39,240
troubleshoot it.

106
00:09:39,270 --> 00:09:46,620
For example, we may get a complaint from a candidate that they never get any emails about new jobs.

107
00:09:46,860 --> 00:09:55,020
This issue here can be in any one of the services that participate in the sign up flow or in another

108
00:09:55,020 --> 00:10:00,690
flow that continuously perform searches for a job for that particular candidate.

109
00:10:01,020 --> 00:10:07,680
Now, in an attempt to catch issues before they go into production, we will also need to write a lot

110
00:10:07,680 --> 00:10:12,470
of relatively more complex integration tests when using choreography.

111
00:10:12,480 --> 00:10:16,980
And that becomes a bigger challenge as we add more services.

112
00:10:17,250 --> 00:10:24,070
So the choreography pattern is more suitable for simpler flows that have fewer services.

113
00:10:24,090 --> 00:10:28,830
So before we move on to the next exciting software architecture pattern.

114
00:10:29,010 --> 00:10:31,740
Let's quickly summarize what we learned today.

115
00:10:31,770 --> 00:10:38,460
We pointed out some of the drawbacks of the execution orchestrator pattern, which included the tight

116
00:10:38,460 --> 00:10:42,750
coupling among the services through the orchestrator service.

117
00:10:42,780 --> 00:10:47,100
We then proposed another architecture pattern called choreography.

118
00:10:47,250 --> 00:10:54,570
In this pattern, all the microservices work together as a dance team, following a sequence of steps

119
00:10:54,570 --> 00:11:00,990
to complete a certain flow, and all the communication among the services is typically done through

120
00:11:00,990 --> 00:11:02,550
asynchronous events.

121
00:11:02,730 --> 00:11:10,650
Finally, we concluded with a simple flow of signing up a new user for a job search, which we designed

122
00:11:10,650 --> 00:11:12,390
using the choreography pattern.

123
00:11:12,540 --> 00:11:20,100
And we also mentioned that while this pattern is very scalable and cost effective, it may get a little

124
00:11:20,100 --> 00:11:22,710
challenging when things go wrong.

125
00:11:22,710 --> 00:11:26,400
And we need to pinpoint a problem with a particular service.

126
00:11:26,580 --> 00:11:28,470
I'll see you guys in the next lecture.
