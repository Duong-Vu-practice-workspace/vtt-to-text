1
Now let's talk about another software architecture pattern that can help us scale a complex flow of
2
business transactions.
3
This pattern is called choreography and is a kind of a sibling of the orchestrator pattern.
4
The problem statement here is the same as the one we covered in the lecture on the orchestration pattern.
5
And that is we have a collection of microservices where each microservice is responsible for a particular
6
type of operations or a specific domain.
7
The microservices are completely decoupled from each other and are potentially not even aware of each
8
other based on an external trigger, such as an event or a request from a user.
9
We need to complete a flow of transactions that span multiple microservices.
10
One solution we offered was the execution orchestrator pattern, where we have a central service that
11
executes a flow by communicating with the relevant services until the flow is complete.
12
While the orchestration pattern is arguably the most intuitive and easiest to implement.
13
It has a few drawbacks.
14
One of the drawbacks is the tight coupling to all the microservices in the system.
15
Remember that one of the reasons we wanted to move to microservices architecture was to speed up development
16
by decoupling the microservices from each other.
17
Now imagine that the team of Service A is working on some modifications to its service.
18
At the same time, the theme of Service B is also making changes to their service and the new team is
19
building a new service called Service C Now because the orchestrator service is tightly coupled with
20
all those services, all the three teams need to coordinate with each other to make sure that changes
21
they are making to the orchestration service.
22
Don't break any flow.
23
And with three teams working on the same code base at the same time, it starts feeling a lot like the
24
monolithic application we moved away from.
25
This situation is a big issue that many companies suffer from at one point or another and is often referred
26
to as a distributed monolith anti pattern.
27
In this anti pattern, we get all the problems of the monolithic architecture and all the issues of
28
the microservices architecture, but without any benefits.
29
So when we have frequent changes happening in multiple microservices, there's a better software architecture
30
pattern called choreography.
31
And the choreography pattern, we remove the smart orchestrator service and replace it with a dumb distributed
32
message cue or message broker that stores all the incoming events at the same time.
33
All the microservices in our system subscribe to relevant events from the message broker where they
34
need to get involved.
35
Once the microservices processes and incoming event, it emits a result as another event to a different
36
channel or topic, which in turn triggers another servers to take an action and produce another event.
37
This chain of events keeps going all the way until the completion of the flow of transactions.
38
The analogy this pattern is using is a sequence of steps in a dance.
39
So just like a group of dancers, the microservices are performing their steps when it's their turn
40
to complete the entire flow of operations as a group.
41
The advantages of this pattern in microservices architecture are pretty evident in terms of loose coupling
42
between services.
43
Since the communication happens through a synchronous events, we can easily make changes and add or
44
remove services completely independently from each other.
45
This allows us to scale any flow to as many services as we want, and also we can scale our organization
46
much easier since we can have many teams operating autonomously with very little friction in the cloud
47
environment.
48
All or some of those microservices can be implemented as function as a service, which means they don't
49
consume any resources until an event.
50
They're interested in triggers their execution, and if they don't consume any resources, we don't
51
have to pay for them, which makes our system very cost effective.
52
On the other hand, if one service needs to handle frequent events, it can scale automatically using
53
out of scaling policies, just like we learned in the previous lectures.
54
Now let's talk about the downside of this pattern.
55
Since we don't have a centralized orchestrator, it is a lot harder to troubleshoot if things go wrong
56
as part of the execution of a flow.
57
It's also very hard to trace the flow of events since all of those events are asynchronous.
58
So those are just a few things to keep in mind when considering using this pattern.
59
Now that we have a good understanding of the choreography pattern on a high level, let's walk through
60
a real life example where the choreography architecture pattern can be used.
61
The example we're going to use is a job search service.
62
In the service, a candidate looking for a job can simply go to our website, fill out a form, sharing
63
some information about themselves, and also upload their resume to our system.
64
Once they do that, their information is ingested into our system and starts automatically and continuously
65
looking for job openings where they can be a good match.
66
Now, based on the candidate's preference, they can get notified about those job opportunities as they
67
arrive or as a daily or weekly feed to their email.
68
If one of those job opportunities looks good, the candidate simply opens the email and clicks the apply
69
button.
70
So let's see how we can design the main scenario of signing up for our service using the choreography.
71
After the user completes the form and uploads their resume using our front end, all that data is sent
72
to the candidate service.
73
The candidate service takes all the information about the new candidate and stores it in a database.
74
After that, it emits a new event that triggers an email confirmation cloud function, which sends an
75
email confirmation to the candidate.
76
This email confirmation informs them that the registration and resume were received and we are now actively
77
looking for a job for them.
78
The same event that trigger the email confirmation function is also consumed by the skills parser service.
79
This service passes all the information from the resume as well as the data provided by the candidate
80
and builds a model of what skills the candidate has, as well as their level of experience with those
81
skills.
82
Once that information is extracted, they're stored in a database and then the skills parser service
83
emits a new event that triggers the job search service to search the database of open jobs for that
84
user.
85
When the search is done, the results are emitted as another event which is consumed by the candidate
86
service and the email service.
87
The candidate service adds those jobs to the candidate's record so the candidate can see them when they
88
log in.
89
And the email service can either send the new jobs to the candidate or do nothing.
90
If the candidate indicated that they want to get only a daily or weekly digest.
91
So as we can see, the entire flow of execution happens through asynchronous communication among services
92
without any central entity to orchestrate the flow.
93
By using this pattern, we reduce the cost and overhead of having the orchestrator service.
94
And additionally, since all the events are delivered through a message broker, even if one of the
95
services was done temporarily, it did not result in loss of messages.
96
When that service comes back online, it can consume those events from the message broker as if nothing
97
happened.
98
Now another benefit is if we want to modify the sign up flow, we can do it very easily.
99
For example, if we want to add a new service that notifies companies about the new candidates with
100
certain valuable skills, we can easily just add that service and let it subscribe to relevant events
101
from the message broker.
102
With this addition, we don't have to touch any other service which keeps our system loosely coupled.
103
This way we can scale our organization and allow running complex and ever evolving flows very easily.
104
On the flip side, as we already mentioned, if something goes wrong, it will be very hard for us to
105
troubleshoot it.
106
For example, we may get a complaint from a candidate that they never get any emails about new jobs.
107
This issue here can be in any one of the services that participate in the sign up flow or in another
108
flow that continuously perform searches for a job for that particular candidate.
109
Now, in an attempt to catch issues before they go into production, we will also need to write a lot
110
of relatively more complex integration tests when using choreography.
111
And that becomes a bigger challenge as we add more services.
112
So the choreography pattern is more suitable for simpler flows that have fewer services.
113
So before we move on to the next exciting software architecture pattern.
114
Let's quickly summarize what we learned today.
115
We pointed out some of the drawbacks of the execution orchestrator pattern, which included the tight
116
coupling among the services through the orchestrator service.
117
We then proposed another architecture pattern called choreography.
118
In this pattern, all the microservices work together as a dance team, following a sequence of steps
119
to complete a certain flow, and all the communication among the services is typically done through
120
asynchronous events.
121
Finally, we concluded with a simple flow of signing up a new user for a job search, which we designed
122
using the choreography pattern.
123
And we also mentioned that while this pattern is very scalable and cost effective, it may get a little
124
challenging when things go wrong.
125
And we need to pinpoint a problem with a particular service.
126
I'll see you guys in the next lecture.